{"version":3,"file":"react-query.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/subscribable.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/react/QueryClientProvider.tsx","../src/react/QueryErrorResetBoundary.tsx","../src/react/useIsFetching.ts","../src/react/useMutation.ts","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/useQueries.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryKeyHashFunction,\n  QueryOptions,\n  QueryStatus,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<TOptions extends QueryOptions<any, any, any>>(\n  arg1: QueryKey | TOptions,\n  arg2?: QueryFunction<any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      const hashFn = getQueryKeyHashFn(query.options)\n      if (query.queryHash !== hashFn(queryKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function getQueryKeyHashFn(\n  options?: QueryOptions<any, any>\n): QueryKeyHashFunction {\n  return options?.queryKeyHashFn || hashQueryKey\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return stableValueHash(queryKey)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(\n  a: string | unknown[],\n  b: string | unknown[]\n): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === 'loading',\n    isSuccess: status === 'success',\n    isError: status === 'error',\n    isIdle: status === 'idle',\n  }\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (onFocus: () => void) => (focused?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((focused?: boolean) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', onFocus, false)\n        window.addEventListener('focus', onFocus, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', onFocus)\n          window.removeEventListener('focus', onFocus)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: () => void) => (online?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    return navigator.onLine === undefined || navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        // Listen to online\n        window.addEventListener('online', onOnline, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onOnline)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { functionalUpdate, sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue = number | RetryDelayFunction\n\ntype RetryDelayFunction = (failureCount: number) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      this.isResolved = true\n      continueFn?.()\n      promiseResolve(value)\n    }\n\n    const reject = (value: any) => {\n      this.isResolved = true\n      continueFn?.()\n      promiseReject(value)\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        reject(new CancelledError(cancelOptions))\n\n        // Cancel transport if supported\n        if (isCancelable(promiseOrValue)) {\n          try {\n            promiseOrValue.cancel()\n          } catch {}\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay = functionalUpdate(retryDelay, this.failureCount) || 0\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import {\n  Updater,\n  ensureArray,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<TQueryFnData, TError, TData> {\n  cache: QueryCache\n  queryKey: QueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<TQueryFnData, TError, TData> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData>\n  queryKey: QueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  onFetch: (context: FetchContext<TQueryFnData, TError, TData>) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  queryKey: QueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData>\n  initialState: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<unknown, TError>\n  private observers: QueryObserver<any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(options: QueryOptions<TQueryFnData, TError, TData>): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(state: QueryState<TData, TError>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel()\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.willFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.willFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify(this)\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel()\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify(this)\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching)\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    // Create query function context\n    const queryKey = ensureArray(this.queryKey)\n    const queryFnContext: QueryFunctionContext = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData> = {\n      fetchOptions,\n      options: this.options,\n      queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n      .then(data => this.setData(data as TData))\n      .catch(error => {\n        // Set error state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (this.cache.config.onError) {\n            this.cache.config.onError(error, this as Query)\n          }\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n\n        // Propagate error\n        throw error\n      })\n      .then(data => {\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n\n        return data\n      })\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify(this)\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert) {\n          let previousStatus: QueryStatus\n\n          if (!state.dataUpdatedAt && !state.errorUpdatedAt) {\n            previousStatus = 'idle'\n          } else if (state.dataUpdatedAt > state.errorUpdatedAt) {\n            previousStatus = 'success'\n          } else {\n            previousStatus = 'error'\n          }\n\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: previousStatus,\n          }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  getQueryKeyHashFn,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (query?: Query) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData> {\n    const hashFn = getQueryKeyHashFn(options)\n    const queryKey = options.queryKey!\n    const queryHash = options.queryHash ?? hashFn(queryKey)\n    let query = this.get<TQueryFnData, TError, TData>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify(query)\n    }\n  }\n\n  remove(query: Query<any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify(query)\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(query?: Query<any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(query)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        if (this.mutationCache.config.onError) {\n          this.mutationCache.config.onError(\n            error,\n            this.state.variables,\n            this.state.context,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        }\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          let cancelFn: undefined | (() => any)\n          const queryFnResult = queryFn(queryFnContext)\n          if ((queryFnResult as any).cancel) {\n            cancelFn = (queryFnResult as any).cancel\n          }\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (cancelFn) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = cancelFn\n          }\n\n          return promise\n        }\n\n        let promise\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        if (isCancelable(promise)) {\n          const finalPromiseAsAny = finalPromise as any\n          finalPromiseAsAny.cancel = promise.cancel\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.fetch())\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery(options: FetchQueryOptions): Promise<void>\n  prefetchQuery(queryKey: QueryKey, options?: FetchQueryOptions): Promise<void>\n  prefetchQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchQueryOptions\n  ): Promise<void>\n  prefetchQuery(\n    arg1: QueryKey | FetchQueryOptions,\n    arg2?: QueryFunction | FetchQueryOptions,\n    arg3?: FetchQueryOptions\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery(options: FetchInfiniteQueryOptions): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    arg1: QueryKey | FetchInfiniteQueryOptions,\n    arg2?: QueryFunction | FetchInfiniteQueryOptions,\n    arg3?: FetchInfiniteQueryOptions\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<T extends QueryOptions<any, any, any>>(options?: T): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  defaultQueryObserverOptions<\n    T extends QueryObserverOptions<any, any, any, any>\n  >(options?: T): T {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import {\n  getStatusProps,\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\ninterface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private initialDataUpdateCount: number\n  private initialErrorUpdateCount: number\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.initialDataUpdateCount = 0\n    this.initialErrorUpdateCount = 0\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.updateQuery()\n\n      this.currentQuery.addObserver(this)\n\n      if (this.willFetchOnMount()) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  willLoadOnMount(): boolean {\n    return (\n      this.options.enabled !== false &&\n      !this.currentQuery.state.dataUpdatedAt &&\n      !(\n        this.currentQuery.state.status === 'error' &&\n        this.options.retryOnMount === false\n      )\n    )\n  }\n\n  willRefetchOnMount(): boolean {\n    return (\n      this.options.enabled !== false &&\n      this.currentQuery.state.dataUpdatedAt > 0 &&\n      (this.options.refetchOnMount === 'always' ||\n        (this.options.refetchOnMount !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnMount(): boolean {\n    return this.willLoadOnMount() || this.willRefetchOnMount()\n  }\n\n  willFetchOnReconnect(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnReconnect === 'always' ||\n        (this.options.refetchOnReconnect !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnWindowFocus(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnWindowFocus === 'always' ||\n        (this.options.refetchOnWindowFocus !== false && this.isStale()))\n    )\n  }\n\n  private willFetchOptionally(): boolean {\n    return this.options.enabled !== false && this.isStale()\n  }\n\n  private isStale(): boolean {\n    return this.currentQuery.isStaleByTime(this.options.staleTime)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    // Take no further actions if there are no subscribers\n    if (!this.listeners.length) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (this.currentQuery !== prevQuery) {\n      this.optionalFetch()\n      this.updateTimers()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (this.options.enabled !== false && prevOptions.enabled === false) {\n      this.optionalFetch()\n    }\n\n    // Update stale interval if needed\n    if (\n      this.options.enabled !== prevOptions.enabled ||\n      this.options.staleTime !== prevOptions.staleTime\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      this.options.enabled !== prevOptions.enabled ||\n      this.options.refetchInterval !== prevOptions.refetchInterval\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private optionalFetch(): void {\n    if (this.willFetchOptionally()) {\n      this.executeFetch()\n    }\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        const prevResult = this.currentResult\n        this.updateResult()\n        this.notify({\n          listeners: this.shouldNotifyListeners(prevResult, this.currentResult),\n          cache: true,\n        })\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected getNewResult(\n    willFetch?: boolean\n  ): QueryObserverResult<TData, TError> {\n    const { state } = this.currentQuery\n    let { isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n    let dataUpdatedAt = state.dataUpdatedAt\n\n    // Optimistically set status to loading if we will start fetching\n    if (willFetch) {\n      isFetching = true\n      if (!dataUpdatedAt) {\n        status = 'loading'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      this.options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      this.previousQueryResult?.isSuccess\n    ) {\n      data = this.previousQueryResult.data\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt\n      status = this.previousQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n      // Use the previous select result if the query data did not change\n      if (this.currentResult && state.data === this.currentResultState?.data) {\n        data = this.currentResult.data\n      } else {\n        data = this.options.select(state.data)\n        if (this.options.structuralSharing !== false) {\n          data = replaceEqualDeep(this.currentResult?.data, data)\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof this.options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      const placeholderData =\n        typeof this.options.placeholderData === 'function'\n          ? (this.options.placeholderData as PlaceholderDataFunction<TData>)()\n          : this.options.placeholderData\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      ...getStatusProps(status),\n      data,\n      dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > this.initialDataUpdateCount ||\n        state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    prevResult: QueryObserverResult,\n    result: QueryObserverResult\n  ): boolean {\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (prevResult === result) {\n      return false\n    }\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    const keys = Object.keys(result)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i] as keyof QueryObserverResult\n      const changed = prevResult[key] !== result[key]\n      const isIncluded = notifyOnChangeProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n\n      if (changed) {\n        if (notifyOnChangePropsExclusions && isExcluded) {\n          continue\n        }\n\n        if (!notifyOnChangeProps || isIncluded) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  private updateResult(willFetch?: boolean): void {\n    const result = this.getNewResult(willFetch)\n\n    // Keep reference to the current state on which the current result is based on\n    this.currentResultState = this.currentQuery.state\n\n    // Only update if something has changed\n    if (!shallowEqualObjects(result, this.currentResult)) {\n      this.currentResult = result\n    }\n  }\n\n  private updateQuery(): void {\n    const prevQuery = this.currentQuery\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    if (query === prevQuery) {\n      return\n    }\n\n    this.previousQueryResult = this.currentResult\n    this.currentQuery = query\n    this.initialDataUpdateCount = query.state.dataUpdateCount\n    this.initialErrorUpdateCount = query.state.errorUpdateCount\n\n    const willFetch = prevQuery\n      ? this.willFetchOptionally()\n      : this.willFetchOnMount()\n\n    this.updateResult(willFetch)\n\n    if (!this.hasListeners()) {\n      return\n    }\n\n    prevQuery?.removeObserver(this)\n    this.currentQuery.addObserver(this)\n\n    if (\n      this.shouldNotifyListeners(this.previousQueryResult, this.currentResult)\n    ) {\n      this.notify({ listeners: true })\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    // Store current result and get new result\n    const prevResult = this.currentResult\n    this.updateResult()\n    const currentResult = this.currentResult\n\n    // Update timers\n    this.updateTimers()\n\n    // Do not notify if the nothing has changed\n    if (prevResult === currentResult) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    if (this.shouldNotifyListeners(prevResult, currentResult)) {\n      notifyOptions.listeners = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify(this.currentQuery)\n      }\n    })\n  }\n}\n","import { difference, getQueryKeyHashFn, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = queries || []\n    this.result = []\n    this.observers = []\n\n    // Subscribe to queries\n    this.updateObservers()\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(queries: QueryObserverOptions[]): void {\n    this.queries = queries\n    this.updateObservers()\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  private updateObservers(): void {\n    let hasIndexChange = false\n\n    const prevObservers = this.observers\n    const newObservers = this.queries.map((options, i) => {\n      let observer: QueryObserver | undefined = prevObservers[i]\n\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      const hashFn = getQueryKeyHashFn(defaultedOptions)\n      defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey!)\n\n      if (\n        !observer ||\n        observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash\n      ) {\n        hasIndexChange = true\n        observer = prevObservers.find(\n          x => x.getCurrentQuery().queryHash === defaultedOptions.queryHash\n        )\n      }\n\n      if (observer) {\n        observer.setOptions(defaultedOptions)\n        return observer\n      }\n\n      return new QueryObserver(this.client, defaultedOptions)\n    })\n\n    if (prevObservers.length === newObservers.length && !hasIndexChange) {\n      return\n    }\n\n    this.observers = newObservers\n    this.result = newObservers.map(observer => observer.getCurrentResult())\n\n    if (!this.listeners.length) {\n      return\n    }\n\n    difference(prevObservers, newObservers).forEach(observer => {\n      observer.destroy()\n    })\n\n    difference(newObservers, prevObservers).forEach(observer => {\n      observer.subscribe(result => {\n        this.onUpdate(observer, result)\n      })\n    })\n\n    this.notify()\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior<TQueryFnData, TError, TData>(),\n    })\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected getNewResult(\n    willFetch?: boolean\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = this.getCurrentQuery()\n    const result = super.getNewResult(willFetch)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(this.options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(this.options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { getStatusProps } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables: variables ?? this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      ...getStatusProps(state.status),\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\n\nconst QueryClientContext = (() => {\n  const context = React.createContext<QueryClient | undefined>(undefined)\n  if (typeof window !== 'undefined') {\n    // @ts-ignore\n    window.ReactQueryClientContext = context\n  }\n  return context\n})()\n\nfunction getQueryClientContext() {\n  return typeof window !== 'undefined'\n    ? // @ts-ignore\n      (window.ReactQueryClientContext as React.Context<\n        QueryClient | undefined\n      >) ?? QueryClientContext\n    : QueryClientContext\n}\n\nexport const useQueryClient = () => {\n  const queryClient = React.useContext(getQueryClientContext())\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n}\n\nexport const QueryClientProvider: React.FC<QueryClientProviderProps> = ({\n  client,\n  children,\n}) => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext()\n\n  return <Context.Provider value={client}>{children}</Context.Provider>\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary: React.FC<QueryErrorResetBoundaryProps> = ({\n  children,\n}) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useIsFetching(filters?: QueryFilters): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters\n): number {\n  const queryClient = useQueryClient()\n  const [filters] = parseFilterArgs(arg1, arg2)\n  const [isFetching, setIsFetching] = React.useState(\n    queryClient.isFetching(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isFetchingRef = React.useRef(isFetching)\n  isFetchingRef.current = isFetching\n\n  React.useEffect(\n    () =>\n      queryClient.getQueryCache().subscribe(\n        notifyManager.batchCalls(() => {\n          const newIsFetching = queryClient.isFetching(filtersRef.current)\n          if (isFetchingRef.current !== newIsFetching) {\n            setIsFetching(newIsFetching)\n          }\n        })\n      ),\n    [queryClient]\n  )\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport {\n  MutationFunction,\n  MutationKey,\n  MutationObserverResult,\n} from '../core/types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient()\n\n  // Create mutation observer\n  const observerRef = React.useRef<\n    MutationObserver<TData, TError, TVariables, TContext>\n  >()\n  const observer =\n    observerRef.current || new MutationObserver(queryClient, options)\n  observerRef.current = observer\n\n  // Update options\n  if (observer.hasListeners()) {\n    observer.setOptions(options)\n  }\n\n  const [currentResult, setCurrentResult] = React.useState(() =>\n    observer.getCurrentResult()\n  )\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(\n        notifyManager.batchCalls(\n          (\n            result: MutationObserverResult<TData, TError, TVariables, TContext>\n          ) => {\n            // Check if the component is still mounted\n            if (observer.hasListeners()) {\n              setCurrentResult(result)\n            }\n          }\n        )\n      ),\n    [observer]\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer]\n  )\n\n  if (currentResult.error && observer.options.useErrorBoundary) {\n    throw currentResult.error\n  }\n\n  return { ...currentResult, mutate, mutateAsync: currentResult.mutate }\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryObserverResult } from '../core/types'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<TQueryFnData, TError, TData, TQueryData>(\n  options: UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData>,\n  Observer: typeof QueryObserver\n) {\n  const queryClient = useQueryClient()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<any, any, any, any>>()\n  const observer =\n    observerRef.current || new Observer(queryClient, defaultedOptions)\n  observerRef.current = observer\n\n  // Update options\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions)\n  }\n\n  const currentResult = observer.getCurrentResult()\n\n  // Remember latest result to prevent redundant renders\n  const latestResultRef = React.useRef(currentResult)\n  latestResultRef.current = currentResult\n\n  const [, rerender] = React.useState({})\n\n  // Subscribe to the observer\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n    return observer.subscribe(\n      notifyManager.batchCalls((result: QueryObserverResult) => {\n        if (result !== latestResultRef.current) {\n          rerender({})\n        }\n      })\n    )\n  }, [observer, errorResetBoundary])\n\n  // Handle suspense\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset()\n      const unsubscribe = observer.subscribe()\n      throw observer.refetch().finally(unsubscribe)\n    }\n\n    if (currentResult.isError) {\n      throw currentResult.error\n    }\n  }\n\n  return currentResult\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\n\nexport function useQueries(queries: UseQueryOptions[]): UseQueryResult[] {\n  const queryClient = useQueryClient()\n\n  // Create queries observer\n  const observerRef = React.useRef<QueriesObserver>()\n  const observer =\n    observerRef.current || new QueriesObserver(queryClient, queries)\n  observerRef.current = observer\n\n  // Update queries\n  if (observer.hasListeners()) {\n    observer.setQueries(queries)\n  }\n\n  const [currentResult, setCurrentResult] = React.useState(() =>\n    observer.getCurrentResult()\n  )\n\n  // Subscribe to the observer\n  React.useEffect(\n    () => observer.subscribe(notifyManager.batchCalls(setCurrentResult)),\n    [observer]\n  )\n\n  return currentResult\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","isServer","window","noop","undefined","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureArray","Array","isArray","difference","array1","array2","filter","x","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","hashFn","getQueryKeyHashFn","options","queryHash","partialMatchKey","isActive","isStale","isFetching","queryKeyHashFn","hashQueryKey","stableValueHash","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","aSize","bItems","bSize","equalItems","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","toString","isError","Error","sleep","timeout","Promise","resolve","setTimeout","getStatusProps","status","isLoading","isSuccess","isIdle","scheduleMicrotask","callback","then","catch","error","NotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","push","batchCalls","args","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager","logger","console","warn","log","getLogger","setLogger","newLogger","Subscribable","listeners","subscribe","listener","onSubscribe","onUnsubscribe","hasListeners","FocusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","isFocused","document","includes","visibilityState","addEventListener","focusManager","OnlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","reject","pause","continueResolve","onPause","onContinue","run","promiseOrValue","retry","retryDelay","delay","shouldRetry","onFail","Query","defaultOptions","setOptions","observers","cache","initialState","state","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","willFetchOnWindowFocus","refetch","willFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","fetchFn","context","behavior","onFetch","fetchMeta","meta","onError","action","reducer","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","previousStatus","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSuccess","onSettled","onMutationUpdate","MutationCache","mutations","mutation","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","fetchPage","manual","param","previous","queryFnResult","page","promiseAsAny","getNextPageParam","getPreviousPageParam","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","getQueryData","setQueryData","parsedOptions","defaultedOptions","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","map","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getQueryCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","initialDataUpdateCount","initialErrorUpdateCount","bindMethods","bind","updateQuery","currentQuery","willFetchOnMount","executeFetch","updateTimers","willLoadOnMount","retryOnMount","willRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","willFetchOptionally","clearTimers","prevOptions","prevQuery","optionalFetch","updateStaleTimeout","refetchInterval","updateRefetchInterval","currentResult","getNextResult","unsubscribe","getCurrentQuery","updateResult","clearStaleTimeout","time","staleTimeoutId","prevResult","shouldNotifyListeners","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","getNewResult","willFetch","isPreviousData","isPlaceholderData","keepPreviousData","previousQueryResult","select","currentResultState","placeholderData","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","notifyOnChangeProps","notifyOnChangePropsExclusions","changed","isIncluded","isExcluded","notifyOptions","QueriesObserver","updateObservers","onUpdate","setQueries","hasIndexChange","prevObservers","newObservers","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","QueryClientContext","React","createContext","ReactQueryClientContext","getQueryClientContext","useQueryClient","queryClient","useContext","QueryClientProvider","children","useEffect","Context","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","QueryErrorResetBoundary","useMemo","useIsFetching","useState","setIsFetching","filtersRef","useRef","current","isFetchingRef","newIsFetching","useMutation","observerRef","setCurrentResult","useCallback","useErrorBoundary","mutateAsync","useBaseQuery","Observer","errorResetBoundary","suspense","latestResultRef","rerender","finally","useQuery","useQueries","useInfiniteQuery"],"mappings":"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"}