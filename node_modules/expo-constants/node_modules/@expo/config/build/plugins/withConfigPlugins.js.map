{"version":3,"file":"withConfigPlugins.js","sourceRoot":"","sources":["../../src/plugins/withConfigPlugins.ts"],"names":[],"mappings":";;AACA,4CAA2D;AAE3D,yDAAsD;AAEtD;;;;;GAKG;AACH,MAAM,WAAW,GAA4C,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;IAC/E,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;QACrC,OAAO,mCAAgB,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;IAC5C,CAAC,EAAE,MAAM,CAAC,CAAC;AACb,CAAC,CAAC;AAEF;;;;;GAKG;AACU,QAAA,iBAAiB,GAAiB,MAAM,CAAC,EAAE;;IACtD,qDAAqD;IACrD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,QAAC,MAAM,CAAC,OAAO,0CAAE,MAAM,CAAA,EAAE;QAC7D,OAAO,MAAM,CAAC;KACf;IACD,+BAA+B;IAC/B,qDAAqD;IACrD,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7C,oFAAoF;IACpF,OAAO,uCAA2B,CAAC,MAAM,CAAC,CAAC;AAC7C,CAAC,CAAC","sourcesContent":["import { ConfigPlugin } from '../Config.types';\nimport { serializeAfterStaticPlugins } from '../Serialize';\nimport { StaticPlugin } from './modulePluginResolver';\nimport { withStaticPlugin } from './withStaticPlugin';\n\n/**\n * Resolves a list of plugins.\n *\n * @param config\n * @param projectRoot\n */\nconst withPlugins: ConfigPlugin<(StaticPlugin | string)[]> = (config, plugins) => {\n  return plugins.reduce((prev, plugin) => {\n    return withStaticPlugin(prev, { plugin });\n  }, config);\n};\n\n/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */\nexport const withConfigPlugins: ConfigPlugin = config => {\n  // @ts-ignore: plugins not on config type yet -- TODO\n  if (!Array.isArray(config.plugins) || !config.plugins?.length) {\n    return config;\n  }\n  // Resolve and evaluate plugins\n  // @ts-ignore: TODO: add plugins to the config schema\n  config = withPlugins(config, config.plugins);\n  // plugins aren't serialized by default, serialize the plugins after resolving them.\n  return serializeAfterStaticPlugins(config);\n};\n"]}