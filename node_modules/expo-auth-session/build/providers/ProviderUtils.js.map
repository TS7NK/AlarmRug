{"version":3,"file":"ProviderUtils.js","sourceRoot":"","sources":["../../src/providers/ProviderUtils.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,EAAE,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AACjE,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAIxC,MAAM,UAAU,mBAAmB,CAAC,SAAmB,EAAE,EAAE,cAAwB;IACjF,sDAAsD;IACtD,oBAAoB;IACpB,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,oCAAoC;AACpC,MAAM,UAAU,cAAc;IAC5B,OAAO,QAAQ,CAAC,MAAM,CAAC;QACrB,GAAG,EAAE,KAAK;QACV,oCAAoC;QACpC,OAAO,EAAE,SAAS,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,WAAW;KAC7E,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAc,EAAE,KAAU,EAAE,YAAoB;IAChF,IAAI,OAAO,KAAK,KAAK,WAAW;QAC9B,8BAA8B;QAC9B,MAAM,IAAI,KAAK,CACb,wBAAwB,MAAM,6BAA6B,YAAY,yBAAyB,CACjG,CAAC;AACN,CAAC;AAED,MAAM,UAAU,eAAe,CAC7B,kBAAmE;IAEnE,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,QAAQ,IAAI,cAAc,EAAE,EAAE;QACpE,kBAAkB,CAAC,QAAQ;KAC5B,CAAC,CAAC;AACL,CAAC","sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { useMemo } from 'react';\nimport { Platform } from 'react-native';\n\nimport { AuthSessionRedirectUriOptions } from '../AuthSession';\n\nexport function applyRequiredScopes(scopes: string[] = [], requiredScopes: string[]): string[] {\n  // Add the required scopes for returning profile data.\n  // Remove duplicates\n  return [...new Set([...scopes, ...requiredScopes])];\n}\n\n// Only natively in the Expo client.\nexport function shouldUseProxy(): boolean {\n  return Platform.select({\n    web: false,\n    // Use the proxy in the Expo client.\n    default: Constants.executionEnvironment === ExecutionEnvironment.StoreClient,\n  });\n}\n\nexport function invariantClientId(idName: string, value: any, providerName: string) {\n  if (typeof value === 'undefined')\n    // TODO(Bacon): Add learn more\n    throw new Error(\n      `Client Id property \\`${idName}\\` must be defined to use ${providerName} auth on this platform.`\n    );\n}\n\nexport function useProxyEnabled(\n  redirectUriOptions: Pick<AuthSessionRedirectUriOptions, 'useProxy'>\n): boolean {\n  return useMemo(() => redirectUriOptions.useProxy ?? shouldUseProxy(), [\n    redirectUriOptions.useProxy,\n  ]);\n}\n"]}