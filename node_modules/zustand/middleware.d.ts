import { GetState, PartialState, SetState, State, StateCreator, StoreApi } from './vanilla';
export declare const redux: <S extends Record<string | number | symbol, unknown>, A extends {
    type: unknown;
}>(reducer: (state: S, action: A) => S, initial: S) => (set: SetState<S>, get: GetState<S>, api: StoreApi<S> & {
    dispatch?: ((a: A) => A) | undefined;
    devtools?: any;
}) => S & {
    dispatch: (a: A) => A;
};
declare type NamedSet<S extends State> = (partial: PartialState<S>, replace?: boolean, name?: string) => void;
export declare const devtools: <S extends Record<string | number | symbol, unknown>>(fn: (set: NamedSet<S>, get: GetState<S>, api: StoreApi<S>) => S, prefix?: string | undefined) => (set: SetState<S>, get: GetState<S>, api: StoreApi<S> & {
    dispatch?: unknown;
    devtools?: any;
}) => S;
export declare const combine: <PrimaryState extends Record<string | number | symbol, unknown>, SecondaryState extends Record<string | number | symbol, unknown>>(initialState: PrimaryState, create: (set: SetState<PrimaryState>, get: GetState<PrimaryState>, api: StoreApi<PrimaryState>) => SecondaryState) => StateCreator<PrimaryState & SecondaryState, SetState<PrimaryState & SecondaryState>>;
declare type StateStorage = {
    getItem: (name: string) => string | null | Promise<string | null>;
    setItem: (name: string, value: string) => void | Promise<void>;
};
declare type PersistOptions<S> = {
    name: string;
    storage?: StateStorage;
    serialize?: (state: S) => string | Promise<string>;
    deserialize?: (str: string) => S | Promise<S>;
};
export declare const persist: <S extends Record<string | number | symbol, unknown>>(config: StateCreator<S, SetState<S>>, options: PersistOptions<S>) => (set: SetState<S>, get: GetState<S>, api: StoreApi<S>) => S;
export {};
