{"version":3,"sources":["RCTAsyncStorage.expo.js"],"names":["NativeModules","TurboModuleRegistry","require","RCTAsyncStorage","get","AsyncSQLiteDBStorage","AsyncLocalStorage"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AAACA,EAAAA,aAAD;AAAgBC,EAAAA;AAAhB,IAAuCC,OAAO,CAAC,cAAD,CAApD;;AAEA,IAAIC,eAAJ,C,CAEA;AACA;AACA;AACA;;AACA,IAAIF,mBAAJ,EAAyB;AACvBE,EAAAA,eAAe,GAAGF,mBAAmB,CAACG,GAApB,CAAwB,sBAAxB,KAAmDH,mBAAmB,CAACG,GAApB,CAAwB,mBAAxB,CAArE;AACD,CAFD,MAEO;AACLD,EAAAA,eAAe,GAAGH,aAAa,CAACK,oBAAd,IAAsCL,aAAa,CAACM,iBAAtE;AACD;;AAED,eAAeH,eAAf","sourcesContent":["/**\n * Expo managed apps don't include the @react-native-async-storage/async-storage\n * native modules yet, but the API interface is the same, so we can use the version\n * exported from React Native still.\n *\n * If in future releases (eg: @react-native-async-storage/async-storage >= 2.0.0) this\n * will likely not be valid anymore, and the package will need to be included in the Expo SDK\n * to continue to work.\n */\nconst {NativeModules, TurboModuleRegistry} = require('react-native');\n\nlet RCTAsyncStorage;\n\n// TurboModuleRegistry falls back to NativeModules\n// so we don't have to try go assign NativeModules'\n// counterparts if TurboModuleRegistry would resolve\n// with undefined.\nif (TurboModuleRegistry) {\n  RCTAsyncStorage = TurboModuleRegistry.get('AsyncSQLiteDBStorage') || TurboModuleRegistry.get('AsyncLocalStorage');\n} else {\n  RCTAsyncStorage = NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;\n}\n\nexport default RCTAsyncStorage;\n"]}